# -*- coding: utf-8 -*-
"""pract5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QXOiRKwRdPLakAwvmI_5JJqSnSfkIZ_s

###Dataset Description:
We will try to build a machine learning model to accurately predict whether
or not the patients in the dataset have diabetes or not?
The datasets consists of several medical predictor variables and one target variable, Outcome.
Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level,
age, and so on.
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay, classification_report
import matplotlib.pyplot as plt

df = pd.read_csv('diabetes.csv')
df.head()

x=df.iloc[:,1:-1].values
y=df.iloc[:,-1].values

sns.countplot(x=y)

print(pd.Series(y).value_counts())

scaler = MinMaxScaler()
x_scaled = scaler.fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.3, random_state=42)
x.shape

print("x_train.shape : ", x_train.shape, "\nx_test.shape : ", x_test.shape)

knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(x_train, y_train)

y_pred = knn.predict(x_test)
ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

print(classification_report(y_test,y_pred))

# Step 1: Specify the values for CreditScore and Age
input_credit_score = 248  # Replace with the desired Credit Score
input_age = 35            # Replace with the desired Age

# Step 2: Prepare the input data
# Create a DataFrame with the input values including all required features
input_data = pd.DataFrame({
    'Glucose': [input_credit_score],
    'Age' : [input_age],
    'Pregnancies': [7],
    'BloodPressure': [72],          # Example value, can be adjusted
    'SkinThickness': [35],      # Example value, can be adjusted
    'Insulin': [0],   # Example value, can be adjusted
    'BMI': [1],       # Example value, can be adjusted
    # 'IsActiveMember': [1],   # Example value, can be adjusted
    # 'EstimatedSalary': [50000]  # Example value, can be adjusted
})

# Step 3: Scale the input data using the previously fitted scaler
scaled_input = scaler.transform(input_data)

# Step 4: Make predictions using the trained model
prediction = knn.predict(scaled_input)

# Step 5: Output the prediction
if prediction[0] == 1:
    print("Yes")
else:
    print("No")

